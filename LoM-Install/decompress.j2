#! /bin/bash

# The variables below are populated at build time via J2 variable.
# This helps see version info of the blob w/o installing/extracting.
#
LOM_VERSION_JSON={{ LOM_VERSION_JSON }}
HOST_OS_VERSION={{ HOST_OS_VERSION }}

function usage()
{
    echo -e "\
        -c - Clean all the backup \n\
        -i - Does install or upgrade \n\
        -f - Force a clean up of backup for upgrade if needed \n\
        -r - Force a rollback \n\
        -v - Dump LoM vresion info\n\
        -h - Usage"
    exit -1
}

function testArgs()
{
    if  [[ $# == 1 && "$1" == "-v" ]]; then
        echo ${LOM_VERSION_JSON} | jq -r | jq
        echo "HostVersion = ${HOST_OS_VERSION}"
        exit 0
    fi

    if [[ $# -eq 0 ]]; then
        usage
    fi

    while getopts "hifcr" opt; do
        case ${opt} in
            i ) OP_INSTALL=1
                ;;
            r ) OP_ROLLBACK=1
                ;;
            c ) OP_CLEAN=1
                ;;
            h ) usage
                ;;
            \? ) usage
                ;;
        esac
    done

    shift $((OPTIND -1))
    if [[ $# -ne 0 ]]; then
        # Expect only options
        usage
    fi
}

function main()
{
    echo ""
    echo "==========================="
    echo "Self-extracting LoM archive"
    echo "==========================="

    export TMPDIR=`mktemp -d /tmp/selfextract.XXXXXX`

    ARCHIVE=`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' $0`

    tail -n+$ARCHIVE $0 | tar xzv -C $TMPDIR

    CDIR=`pwd`
    cd $TMPDIR

    ./install/LoM-install.sh $@
    RET=$?

    cd $CDIR

    if [[ ${RET} == 0 ]]; then
        #rm -rf $TMPDIR
        echo "Install succeeded"
    else
        echo "Install failed with ${RET}"
    fi
    echo "TMPDIR is $TMPDIR"

    exit ${RET}
}

testArgs $@
main $@

__ARCHIVE_BELOW__
